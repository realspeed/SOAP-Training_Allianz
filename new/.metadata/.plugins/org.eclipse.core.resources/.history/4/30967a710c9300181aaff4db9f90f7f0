package com.allianz.pricingdetailsservice.handler;

import java.io.ByteArrayOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Map;
import java.util.Set;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;

import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import com.sun.xml.bind.v2.runtime.XMLSerializer;

public class PricingHandler implements SOAPHandler<SOAPMessageContext> {
	public static String getSOAPResponse;
    public static String outputSoapMsg;
     
    public PricingHandler() 
    {
    }
     
    public void init(Map mapCollection) 
    {
    }
 
    public Set<QName> getHeaders() {
        return null;
    }
 
    public boolean handleMessage(SOAPMessageContext messageContext) 
    {
        getRequestResponse(messageContext);
        return true;
    }
 
    public boolean handleFault(SOAPMessageContext messageContext) {
        getRequestResponse(messageContext);
        return true;
    }
 
     
    public void close(MessageContext messageContext) {
    }
     
    public void destroy() {
    }
    public void getRequestResponse(SOAPMessageContext messageContext) 
    {       
    	Boolean outboundProperty = (Boolean) messageContext.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
        SOAPMessage objSOAPMessage = null;
        ByteArrayOutputStream objByteArrayOS =null;
        Document objDocument = null;
        InputSource objInputSource =null;
        DocumentBuilderFactory documentBuilderFactory = null;
        DocumentBuilder documentBuilder =null;
         
        try
        {
             
            objSOAPMessage = messageContext.getMessage();
            objByteArrayOS = new ByteArrayOutputStream();
            objSOAPMessage.writeTo(objByteArrayOS);
           
             
            if (!outboundProperty.booleanValue()) 
            {
                documentBuilderFactory = DocumentBuilderFactory.newInstance();
                documentBuilder = documentBuilderFactory.newDocumentBuilder();
                objInputSource = new InputSource(new StringReader(objByteArrayOS.toString()));
                objDocument = documentBuilder.parse(objInputSource);
            }
       }    
       catch (Exception errorException) 
       {
       }
    }
}
